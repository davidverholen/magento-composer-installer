<?php
/**
 * GitignoreTest.php
 *
 * PHP Version 5
 *
 * @category DavidVerholen_MagentoComposerInstaller
 * @package  DavidVerholen_MagentoComposerInstaller
 * @author   David Verholen <david@verholen.com>
 * @license  http://opensource.org/licenses/OSL-3.0 OSL-3.0
 * @link     http://github.com/davidverholen
 */

namespace Bragento\Test\Magento\Composer\Installer\Util;

use DavidVerholen\Magento\Composer\Installer\Util\Gitignore;
use org\bovigo\vfs\vfsStream;

/**
 * Class GitignoreTest
 *
 * @category DavidVerholen_MagentoComposerInstaller
 * @package  Bragento\Test\Magento\Composer\Installer\Util
 * @author   David Verholen <david@verholen.com>
 * @license  http://opensource.org/licenses/OSL-3.0 OSL-3.0
 * @link     http://github.com/davidverholen
 */
class GitignoreTest extends GitignoreDataProvider
{
    protected $fileLocation;

    public function testFileCreated()
    {
        $this->getTestObject()->addEntry('test')->persist();
        $this->assertFileExists($this->getFileLocation());
    }

    /**
     * testLoadLines
     *
     * @param array $entries
     *
     * @return void
     *
     * @dataProvider provideGitignoreEntries
     */
    public function testLoadLines(array $entries)
    {
        file_put_contents(
            $this->getFileLocation(),
            implode(Gitignore::LINE_BREAK, $entries)
        );
        $this->getTestObject()->reload();
        $this->assertFileExists($this->getFileLocation());
        $this->assertSame($entries, $this->getTestObject()->getEntries());
    }

    /**
     * testNoDuplicates
     *
     * @param array $entries
     * @param array $expected
     *
     * @return void
     *
     * @dataProvider provideDuplicateEntries
     */
    public function testNoDuplicates(array $entries, array $expected)
    {
        $this->getTestObject()->addEntries($entries);
        $this->assertSame($expected, $this->getTestObject()->getEntries());
    }

    /**
     * testRemoveFiles
     *
     * @param $entries
     * @param $toRemove
     *
     * @return void
     *
     * @dataProvider provideRemoveEntriesData
     */
    public function testRemoveFiles($entries, $toRemove)
    {
        file_put_contents(
            $this->getFileLocation(),
            implode(Gitignore::LINE_BREAK, $entries)
        );
        $this->getTestObject()->reload();
        $this->getTestObject()->removeEntries($toRemove);
        $this->assertSame(
            array_values(array_diff($entries, $toRemove)),
            array_values($this->getTestObject()->getEntries())
        );
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->getTestObject()->reload();
    }


    /**
     * getTestObject
     *
     * @return Gitignore
     */
    protected function getTestObject()
    {
        return Gitignore::edit($this->getFileLocation());
    }

    /**
     * getFileLocation
     *
     * @return string
     */
    protected function getFileLocation()
    {
        if (null === $this->fileLocation) {
            $this->fileLocation = vfsStream::url(
                $this->getFilesystem()->joinFileUris(
                    self::VFS_ROOT,
                    Gitignore::FILENAME
                )
            );
        }

        return $this->fileLocation;
    }
}
